// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "sqlite"
    url      = "file:./db.sqlite"
    // url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    role           String          @default("USER")
    accounts       Account[]
    sessions       Session[]
    memories       Memory[]
    memoryLikes    MemoryLike[]
    memoryComments MemoryComment[]
    memoryViews    MemoryView[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Memory {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    modifiedAt     DateTime         @default(now())
    title          String
    description    String?
    year           Int?
    yearMin        Int?
    yearMax        Int?
    fileId         String           @unique
    file           File?            @relation(fields: [fileId], references: [id])
    userId         String
    user           User             @relation(fields: [userId], references: [id])
    memoryLikes    MemoryLike[]
    memoryComments MemoryComment[]
    views          MemoryView[]
    deleted        Boolean          @default(false)
    isDraft        Boolean          @default(false)
    categories     MemoryCategory[]
    tags           MemoryTag[]
}

model MemoryLike {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    modifiedAt DateTime @default(now())
    memoryId   String
    memory     Memory   @relation(fields: [memoryId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])
}

model MemoryComment {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    modifiedAt DateTime @default(now())
    memoryId   String
    memory     Memory   @relation(fields: [memoryId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    body       String
}

model File {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    originalName String
    ext          String
    size         Int
    width        Int?
    height       Int?
    mimeType     String?
    Memory       Memory?
}

model MemoryView {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    memoryId  String
    memory    Memory   @relation(fields: [memoryId], references: [id])
    userId    String?
    user      User?    @relation(fields: [userId], references: [id])
}

model MemoryCategory {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    modifiedAt DateTime @default(now())
    name       String
    memories   Memory[]
}

model MemoryTag {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    modifiedAt DateTime @default(now())
    name       String
    memories   Memory[]
}
